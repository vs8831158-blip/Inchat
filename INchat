// main.dart
// Single-file Flutter app for "Inchat" (email/password auth + Firestore chat).
// Copy this into lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

// If you used `flutterfire configure`, import the generated file:
// import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    // If you have firebase_options.dart generated by FlutterFire CLI, replace below:
    // await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    await Firebase.initializeApp();
  } catch (e) {
    // If Firebase initialize fails, app will still show an error in UI.
    print('Firebase initialize error: $e');
  }
  runApp(const InchatApp());
}

class InchatApp extends StatelessWidget {
  const InchatApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Inchat',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        useMaterial3: true,
      ),
      home: const AuthGate(),
    );
  }
}

/// Simple auth gate: if logged in -> ChatScreen else -> LoginScreen
class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }
        final user = snapshot.data;
        if (user == null) {
          return const LoginScreen();
        } else {
          return ChatScreen(user: user);
        }
      },
    );
  }
}

/// Login / Signup screen
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});
  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  bool isLogin = true;
  final _formKey = GlobalKey<FormState>();
  final emailCtl = TextEditingController();
  final passCtl = TextEditingController();
  bool loading = false;
  String? error;

  @override
  void dispose() {
    emailCtl.dispose();
    passCtl.dispose();
    super.dispose();
  }

  Future<void> submit() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() {
      loading = true;
      error = null;
    });
    final email = emailCtl.text.trim();
    final password = passCtl.text.trim();

    try {
      if (isLogin) {
        await FirebaseAuth.instance.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
      } else {
        final userCred = await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        // store displayName as email prefix (optional)
        await userCred.user?.updateDisplayName(email.split('@').first);
      }
    } on FirebaseAuthException catch (e) {
      setState(() {
        error = e.message ?? 'Auth error';
      });
    } catch (e) {
      setState(() {
        error = e.toString();
      });
    } finally {
      if (mounted) {
        setState(() {
          loading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Inchat â€” Login'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(18.0),
        child: Center(
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 480),
            child: Card(
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(isLogin ? 'Welcome back!' : 'Create an account', style: Theme.of(context).textTheme.headlineSmall),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: emailCtl,
                        decoration: const InputDecoration(labelText: 'Email'),
                        keyboardType: TextInputType.emailAddress,
                        validator: (v) {
                          if (v == null || v.trim().isEmpty) return 'Enter email';
                          if (!v.contains('@')) return 'Enter valid email';
                          return null;
                        },
                      ),
                      const SizedBox(height: 10),
                      TextFormField(
                        controller: passCtl,
                        decoration: const InputDecoration(labelText: 'Password'),
                        obscureText: true,
                        validator: (v) {
                          if (v == null || v.trim().length < 6) return '6+ chars';
                          return null;
                        },
                      ),
                      const SizedBox(height: 12),
                      if (error != null)
                        Text(error!, style: const TextStyle(color: Colors.red)),
                      const SizedBox(height: 8),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: loading ? null : submit,
                          child: loading
                              ? const SizedBox(height: 18, width: 18, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white))
                              : Text(isLogin ? 'Login' : 'Sign up'),
                        ),
                      ),
                      TextButton(
                        onPressed: loading ? null : () => setState(() { isLogin = !isLogin; }),
                        child: Text(isLogin ? 'Create account' : 'Have an account? Login'),
                      ),
                      const SizedBox(height: 6),
                      const Text('Tip: Use any email & password. For quick testing create multiple accounts.'),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

/// Chat screen
class ChatScreen extends StatefulWidget {
  final User user;
  const ChatScreen({required this.user, super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final msgCtl = TextEditingController();
  final _scroll = ScrollController();

  @override
  void dispose() {
    msgCtl.dispose();
    _scroll.dispose();
    super.dispose();
  }

  Future<void> sendMessage() async {
    final text = msgCtl.text.trim();
    if (text.isEmpty) return;
    final uid = widget.user.uid;
    final name = widget.user.displayName ?? widget.user.email?.split('@').first ?? 'User';
    await FirebaseFirestore.instance.collection('messages').add({
      'text': text,
      'uid': uid,
      'name': name,
      'ts': FieldValue.serverTimestamp(),
    });
    msgCtl.clear();
    // optional: scroll to bottom
    await Future.delayed(const Duration(milliseconds: 100));
    if (_scroll.hasClients) {
      _scroll.animateTo(_scroll.position.maxScrollExtent, duration: const Duration(milliseconds: 250), curve: Curves.easeOut);
    }
  }

  Future<void> signOut() async {
    await FirebaseAuth.instance.signOut();
  }

  Widget _buildMessageTile(Map<String, dynamic> data, bool mine) {
    final text = data['text'] ?? '';
    final name = data['name'] ?? 'User';
    final ts = data['ts'] as Timestamp?;
    final timeStr = ts != null ? DateTime.fromMillisecondsSinceEpoch(ts.millisecondsSinceEpoch).toLocal().toString().split('.').first : '';
    return Align(
      alignment: mine ? Alignment.centerRight : Alignment.centerLeft,
      child: ConstrainedBox(
        constraints: const BoxConstraints(maxWidth: 320),
        child: Card(
          color: mine ? Colors.indigo.shade100 : Colors.grey.shade200,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            child: Column(
              crossAxisAlignment: mine ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(name, style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 13)),
                const SizedBox(height: 6),
                Text(text),
                const SizedBox(height: 6),
                Text(timeStr, style: const TextStyle(fontSize: 10, color: Colors.black54)),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _chatList() {
    return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
      stream: FirebaseFirestore.instance
          .collection('messages')
          .orderBy('ts', descending: false)
          .limit(500)
          .snapshots(),
      builder: (context, snap) {
        if (snap.hasError) return const Center(child: Text('Load error'));
        if (snap.connectionState == ConnectionState.waiting) return const Center(child: CircularProgressIndicator());
        final docs = snap.data?.docs ?? [];
        return ListView.builder(
          controller: _scroll,
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          itemCount: docs.length,
          itemBuilder: (context, i) {
            final d = docs[i].data();
            final mine = d['uid'] == widget.user.uid;
            return Padding(
              padding: const EdgeInsets.symmetric(vertical: 6),
              child: _buildMessageTile(d, mine),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final name = widget.user.displayName ?? widget.user.email ?? 'You';
    return Scaffold(
      appBar: AppBar(
        title: Row(children: [
          const Icon(Icons.chat_bubble_outline),
          const SizedBox(width: 8),
          const Text('Inchat'),
          const SizedBox(width: 8),
          Text('â€¢ $name', style: const TextStyle(fontSize: 14, color: Colors.white70)),
        ]),
        actions: [
          IconButton(onPressed: signOut, icon: const Icon(Icons.logout)),
        ],
      ),
      body: Column(
        children: [
          Expanded(child: _chatList()),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.fromLTRB(12,8,12,12),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: msgCtl,
                      textCapitalization: TextCapitalization.sentences,
                      decoration: const InputDecoration(
                        hintText: 'Type a message...',
                        border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(8))),
                        isDense: true,
                        contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                      ),
                      onSubmitted: (_) => sendMessage(),
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: sendMessage,
                    style: ElevatedButton.styleFrom(shape: const CircleBorder(), padding: const EdgeInsets.all(14)),
                    child: const Icon(Icons.send),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
name: inchat
description: A simple chat app (Inchat) - single file example
publish_to: "none"

environment:
  sdk: ">=2.19.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^2.14.0
  firebase_auth: ^4.6.0
  cloud_firestore: ^4.8.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true
workflows:
  inchat-workflow:
    name: Inchat Android build
    max_build_duration: 60
    environment:
      flutter: stable
    scripts:
      - name: Install dependencies
        script: |
          flutter pub get
      - name: Build APK
        script: |
          flutter build apk --release
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
